name: Build

on: [push, pull_request]

jobs:
  wii:
    name: DevkitPPC build
    runs-on: ubuntu-latest
    container: 
      image: devkitpro/devkitppc:latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Checkout lodepng
      uses: actions/checkout@v4
      with:
        repository: 'lvandeve/lodepng'
        path: tempsource/lodepng

    - name: Checkout mlib
      uses: actions/checkout@v4
      with:
        repository: 'P-p-H-d/mlib'
        path: tempsource/m-lib

    - name: Checkout cNBT
      uses: actions/checkout@v4
      with:
        repository: 'chmod222/cNBT'
        path: tempsource/cNBT

    - name: Checkout parson
      uses: actions/checkout@v4
      with:
        repository: 'kgabis/parson'
        path: tempsource/parson

    - name: Checkout cglm
      uses: actions/checkout@v4
      with:
        repository: 'recp/cglm'
        path: tempsource/cglm

    - name: Move dependencies
      run: |
        mkdir ./source/cglm/
        mkdir ./source/lodepng/
        mkdir ./source/cNBT/
        mkdir ./source/parson/
        mkdir ./source/m-lib/
        mv ./tempsource/cglm/include/cglm/* ./source/cglm/
        mv ./tempsource/lodepng/lodepng.h ./source/lodepng/lodepng.h
        mv ./tempsource/lodepng/lodepng.cpp ./source/lodepng/lodepng.c
        mv ./tempsource/cNBT/buffer.* ./source/cNBT/
        mv ./tempsource/cNBT/list.h ./source/cNBT/
        mv ./tempsource/cNBT/nbt_*.c ./source/cNBT/
        mv ./tempsource/cNBT/nbt.h ./source/cNBT/
        mv ./tempsource/parson/parson.* ./source/parson/
        mv ./tempsource/m-lib/*.h ./source/m-lib/

    - name: Make
      run: |
        sudo chmod +x /etc/profile.d/devkit-env.sh
        /etc/profile.d/devkit-env.sh
        make -j 4
      env: 
        C_INCLUDE_PATH: "${{ github.workspace }}/source/"

    - name: Create SD zip
      run: |
        mkdir -p ./apps/cavex/saves/
        mv assets ./apps/cavex/
        mv resources/*.shader ./apps/cavex/assets/
        mv CavEX.dol ./apps/cavex/boot.dol
        mv config.json ./apps/cavex/
        mv icon.png ./apps/cavex/
        mv meta.xml ./apps/cavex/
      
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: SD card app folder
        path: apps

  pc:
    name: PC build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Checkout lodepng
      uses: actions/checkout@v4
      with:
        repository: 'lvandeve/lodepng'
        path: tempsource/lodepng

    - name: Checkout mlib
      uses: actions/checkout@v4
      with:
        repository: 'P-p-H-d/mlib'
        path: tempsource/m-lib

    - name: Checkout cNBT
      uses: actions/checkout@v4
      with:
        repository: 'chmod222/cNBT'
        path: tempsource/cNBT

    - name: Checkout parson
      uses: actions/checkout@v4
      with:
        repository: 'kgabis/parson'
        path: tempsource/parson

    - name: Checkout cglm
      uses: actions/checkout@v4
      with:
        repository: 'recp/cglm'
        path: tempsource/cglm

    - name: Move dependencies
      run: |
        mkdir ./source/cglm/
        mkdir ./source/lodepng/
        mkdir ./source/cNBT/
        mkdir ./source/parson/
        mkdir ./source/m-lib/
        mv ./tempsource/cglm/include/cglm/* ./source/cglm/
        mv ./tempsource/lodepng/lodepng.h ./source/lodepng/lodepng.h
        mv ./tempsource/lodepng/lodepng.cpp ./source/lodepng/lodepng.c
        mv ./tempsource/cNBT/buffer.* ./source/cNBT/
        mv ./tempsource/cNBT/list.h ./source/cNBT/
        mv ./tempsource/cNBT/nbt_*.c ./source/cNBT/
        mv ./tempsource/cNBT/nbt.h ./source/cNBT/
        mv ./tempsource/parson/parson.* ./source/parson/
        mv ./tempsource/m-lib/*.h ./source/m-lib/

    - name: Install Linux dependencies
      run: sudo apt-get -y install libglfw3-dev libglew-dev zlib1g-dev

    - name: Make
      run: |
        mkdir build_pc
        cd build_pc
        cmake ..
        make -j 4
      env: 
        C_INCLUDE_PATH: "${{ github.workspace }}/source/"

    - name: Create zip
      run: |
        mkdir -p ./apps/cavex/saves/
        mv assets ./apps/cavex/
        mv resources/*.shader ./apps/cavex/assets/
        mv build_pc/cavex ./apps/cavex/cavex
        mv config_pc.json ./apps/cavex/config.json
        tar -czvf cavex.tar.gz ./apps/cavex/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: PC tgz
        path: cavex.tar.gz



  MSVC:
    name: MSVC build #this shit will always fail, im not fixing it.
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Checkout lodepng
      uses: actions/checkout@v4
      with:
        repository: 'lvandeve/lodepng'
        path: tempsource\lodepng

    - name: Checkout mlib
      uses: actions/checkout@v4
      with:
        repository: 'P-p-H-d/mlib'
        path: tempsource\m-lib

    - name: Checkout cNBT
      uses: actions/checkout@v4
      with:
        repository: 'chmod222/cNBT'
        path: tempsource\cNBT

    - name: Checkout parson
      uses: actions/checkout@v4
      with:
        repository: 'kgabis/parson'
        path: tempsource\parson

    - name: Checkout cglm
      uses: actions/checkout@v4
      with:
        repository: 'recp/cglm'
        path: tempsource\cglm

    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1


    - name: Move dependencies
      run: |
        mkdir source\cglm\
        mkdir source\lodepng\
        mkdir source\cNBT\
        mkdir source\parson\
        mkdir source\m-lib\
        mv tempsource\cglm\include\cglm\* source\cglm\
        mv tempsource\lodepng\lodepng.h source\lodepng\lodepng.h
        mv tempsource\lodepng\lodepng.cpp source\lodepng\lodepng.c
        mv tempsource\cNBT\buffer.* source\cNBT\
        mv tempsource\cNBT\list.h source\cNBT\
        mv tempsource\cNBT\nbt_*.c source\cNBT\
        mv tempsource\cNBT\nbt.h source\cNBT\
        mv tempsource\parson\parson.* source\parson\
        mv tempsource\m-lib\*.h source\m-lib\

    - name: Install dependencies
      run: |
       vcpkg integrate install
       vcpkg install glfw3
       vcpkg install glew
       vcpkg install zlib
       vcpkg install pthread
       vcpkg install pthreads
       vcpkg install pthread-stubs
       vcpkg install pthreadpool

    - name: Make
      run: |
        mkdir build_pc
        cd build_pc
        cmake -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_INCLUDE_PATH=D:\a\CavEX\CavEX\source ..
        msbuild cavex.sln
        REM Your command that might fail
        echo This command might fail, but we're handling it...
        exit /b 0  REM Always exit with success
      continue-on-error: true  # Mark this step as successful even if it fails
      env: 
        C_INCLUDE_PATH: "${{ github.workspace }}/source/"

    - name: Create zip
      run: |
        mkdir .\apps\cavex\saves\
        mv assets .\apps\cavex\
        mv resources\*.shader .\apps\cavex\assets\
        mv build_pc\Release\cavex .\apps\cavex\cavex.exe
        mv config_pc.json .\apps\cavex\config.json
        Compress-Archive -Path .\apps\cavex\ -DestinationPath cavex.zip
        REM Your command that might fail
        echo This command might fail, but we're handling it...
        exit /b 0  REM Always exit with success 
      continue-on-error: true  # Mark this step as successful even if it fails

    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: msvc
        path: .


  
  msys2:
    name: msys2 build
    runs-on: windows-latest
    env:
      MSYSTEM: MINGW64
      FF_SCRIPT_SECTIONS: '0'
      CONFIGURE_ARGS: '--target-list=x86_64-softmmu --without-default-devices -Ddebug=false -Doptimization=0'
      TEST_ARGS: '--no-suite qtest'
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Checkout lodepng
      uses: actions/checkout@v4
      with:
        repository: 'lvandeve/lodepng'
        path: tempsource\lodepng

    - name: Checkout mlib
      uses: actions/checkout@v4
      with:
        repository: 'P-p-H-d/mlib'
        path: tempsource\m-lib

    - name: Checkout cNBT
      uses: actions/checkout@v4
      with:
        repository: 'chmod222/cNBT'
        path: tempsource\cNBT

    - name: Checkout parson
      uses: actions/checkout@v4
      with:
        repository: 'kgabis/parson'
        path: tempsource\parson

    - name: Checkout cglm
      uses: actions/checkout@v4
      with:
        repository: 'recp/cglm'
        path: tempsource\cglm

    - name: Setup msbuild
      uses: microsoft/setup-msbuild@v1


    - name: Move dependencies
      run: |
        mkdir source\cglm\
        mkdir source\lodepng\
        mkdir source\cNBT\
        mkdir source\parson\
        mkdir source\m-lib\
        mv tempsource\cglm\include\cglm\* source\cglm\
        mv tempsource\lodepng\lodepng.h source\lodepng\lodepng.h
        mv tempsource\lodepng\lodepng.cpp source\lodepng\lodepng.c
        mv tempsource\cNBT\buffer.* source\cNBT\
        mv tempsource\cNBT\list.h source\cNBT\
        mv tempsource\cNBT\nbt_*.c source\cNBT\
        mv tempsource\cNBT\nbt.h source\cNBT\
        mv tempsource\parson\parson.* source\parson\
        mv tempsource\m-lib\*.h source\m-lib\

    - name: Set up MSYS2
      run: |
          Write-Output "Acquiring msys2.exe installer at $(Get-Date -Format u)"
          If ( !(Test-Path -Path msys64\var\cache ) ) {
              mkdir msys64\var\cache
          }
          Invoke-WebRequest "https://repo.msys2.org/distrib/msys2-x86_64-latest.sfx.exe.sig" -outfile "msys2.exe.sig"
          if ( Test-Path -Path msys64\var\cache\msys2.exe.sig ) {
              Write-Output "Cached installer sig" ;
              if ( ((Get-FileHash msys2.exe.sig).Hash -ne (Get-FileHash msys64\var\cache\msys2.exe.sig).Hash) ) {
                  Write-Output "Mis-matched installer sig, new installer download required" ;
                  Remove-Item -Path msys64\var\cache\msys2.exe.sig ;
                  if ( Test-Path -Path msys64\var\cache\msys2.exe ) {
                      Remove-Item -Path msys64\var\cache\msys2.exe
                  }
              } else {
                  Write-Output "Matched installer sig, cached installer still valid"
              }
          } else {
              Write-Output "No cached installer sig, new installer download required" ;
              if ( Test-Path -Path msys64\var\cache\msys2.exe ) {
                  Remove-Item -Path msys64\var\cache\msys2.exe
              }
          }
          if ( !(Test-Path -Path msys64\var\cache\msys2.exe ) ) {
              Write-Output "Fetching latest installer" ;
              Invoke-WebRequest "https://repo.msys2.org/distrib/msys2-x86_64-latest.sfx.exe" -outfile "msys64\var\cache\msys2.exe" ;
              Copy-Item -Path msys2.exe.sig -Destination msys64\var\cache\msys2.exe.sig
          } else {
              Write-Output "Using cached installer"
          }
          Write-Output "Invoking msys2.exe installer at $(Get-Date -Format u)"
          msys64\var\cache\msys2.exe -y
          ((Get-Content -path .\msys64\etc\post-install\07-pacman-key.post -Raw) -replace '--refresh-keys', '--version') | Set-Content -Path .\msys64\etc\post-install\07-pacman-key.post
          .\msys64\usr\bin\bash -lc "sed -i 's/^CheckSpace/#CheckSpace/g' /etc/pacman.conf"
          .\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Core update
          .\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'  # Normal update
          taskkill /F /FI "MODULES eq msys-2.0.dll"
    - name: Install dependencies
      run: |
          Write-Output "Installing mingw packages at $(Get-Date -Format u)"
          .\msys64\usr\bin\bash -lc 'pacman -Sy --noconfirm --needed \
          bison \
          zlib-devel \
          zlib \
          diffutils \
          flex \
          tar \
          doxygen \
          cmake \
          wget \
          git \
          grep \
          make \
          rsync \
          ninja \
          glib2-devel \
          patch \
          sed \
          mingw-w64-x86_64-cmake \
          mingw-w64-x86_64-glew \
          mingw-w64-x86_64-glfw \
          mingw-w64-x86_64-binutils \
          mingw-w64-x86_64-doxygen \
          mingw-w64-x86_64-capstone \
          mingw-w64-x86_64-ccache \
          mingw-w64-x86_64-curl \
          mingw-w64-x86_64-cyrus-sasl \
          mingw-w64-x86_64-dtc \
          mingw-w64-x86_64-gcc \
          mingw-w64-x86_64-glib2 \
          mingw-w64-x86_64-gnutls \
          mingw-w64-x86_64-gtk3 \
          mingw-w64-x86_64-libgcrypt \
          mingw-w64-x86_64-libjpeg-turbo \
          mingw-w64-x86_64-libnfs \
          mingw-w64-x86_64-libpng \
          mingw-w64-x86_64-libssh \
          mingw-w64-x86_64-libtasn1 \
          mingw-w64-x86_64-libusb \
          mingw-w64-x86_64-lzo2 \
          mingw-w64-x86_64-libslirp \
          mingw-w64-x86_64-nettle \
          mingw-w64-x86_64-clang \
          mingw-w64-x86_64-ninja \
          mingw-w64-x86_64-pixman \
          mingw-w64-x86_64-pkgconf \
          mingw-w64-x86_64-python \
          mingw-w64-x86_64-SDL2 \
          mingw-w64-x86_64-SDL2_image \
          mingw-w64-x86_64-snappy \
          mingw-w64-x86_64-spice \
          mingw-w64-x86_64-usbredir \
          mingw-w64-x86_64-zstd \
          mingw-w64-x86_64-make'
    - name: init_submodules
      run: git submodule update --init --recursive
    - name: Build
      run: |
          Write-Output "Running build at $(Get-Date -Format u)"
          $env:CHERE_INVOKING = 'yes'  # Preserve the current working directory
          $env:MSYS = 'winsymlinks:native' # Enable native Windows symlink
          $env:CCACHE_BASEDIR = "$env:CI_PROJECT_DIR"
          $env:CCACHE_DIR = "$env:CCACHE_BASEDIR/ccache"
          $env:CCACHE_MAXSIZE = "500M"
          $env:CCACHE_DEPEND = 1 # cache misses are too expensive with preprocessor mode
          $env:CC = "ccache gcc"
          mkdir build_wpc
          cd build_wpc
          D:\a\CavEX\CavEX\msys64\usr\bin\bash -lc "ccache --zero-stats"
          D:\a\CavEX\CavEX\msys64\usr\bin\bash -lc "cmake .. && ninja"
          D:\a\CavEX\CavEX\msys64\usr\bin\bash -lc "ccache --show-stats"
          Write-Output "Finished build at $(Get-Date -Format u)"


    - name: Create zip
      run: |
         mkdir .\apps\cavex\saves\
         mv assets .\apps\cavex\
         mv resources\*.shader .\apps\cavex\assets\
         mv build_wpc .\apps\cavex\cavex.exe
         mv config_pc.json .\apps\cavex\config.json
         Compress-Archive -Path .\apps\cavex\ -DestinationPath cavex.zip
 
    - name: Upload Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
         name: PC zip
         path: cavex.zip

 







      
